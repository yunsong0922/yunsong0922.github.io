<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芸菘的足迹</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-15T09:28:28.938Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yunsong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Administrative Professional Tips</title>
    <link href="http://yoursite.com/2019/12/15/Administrative%20Professional%20Tips/"/>
    <id>http://yoursite.com/2019/12/15/Administrative Professional Tips/</id>
    <published>2019-12-14T16:00:00.000Z</published>
    <updated>2019-12-15T09:28:28.938Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#keeping-the-gate">Keeping the gate</a></li><li><a href="#personal-branding-clear-powerful-and-compelling-public-image">Personal branding - Clear, Powerful and Compelling public image</a><ul><li><a href="#personal-brand">Personal brand</a></li></ul></li><li><a href="#vision">Vision</a></li><li><a href="#executive-presence">Executive Presence</a></li><li><a href="#networking">Networking</a></li><li><a href="#professional-organizations">Professional Organizations</a></li><li><a href="#managing-up">Managing Up</a></li><li><a href="#managing-sideways">Managing Sideways</a></li><li><a href="#managing-down">Managing Down</a></li><li><a href="#goal-setting">Goal Setting</a></li><li><a href="#office-politics-and-gossip">Office politics and gossip</a><ul><li><a href="#reference">Reference</a></li></ul></li></ul><!-- tocstop --><h3><span id="keeping-the-gate">Keeping the gate</span></h3><ul><li>Route inquiries</li><li>Dissect the issue</li><li>Gain trust</li><li>Do not cold transfer</li><li>Inform of next steps<ul><li>Whenever possible, utilize email. This allows for a paper trail of the issue and its conclusion.</li></ul></li><li>Determine the inquiries on which to update executive</li></ul><h3><span id="personal-branding-clear-powerful-and-compelling-public-image">Personal branding - Clear, Powerful and Compelling public image</span></h3><h4><span id="personal-brand">Personal brand</span></h4><ul><li>Physical appearance</li><li>Personality and behavior - Low key</li><li>Compentencies, skills, talents</li><li>Differentiations</li></ul><h3><span id="vision">Vision</span></h3><h3><span id="executive-presence">Executive Presence</span></h3><p>Ability to project confidence, composure, and engage others to inspire them to act</p><p>Seven Cs</p><ul><li><code>Composure</code> - Ability to control your emotions, recognize emotions in others, and manage your response to them.</li><li><code>Connection</code> - Ability to engate others to make them feel comfortable</li><li><code>Charisma</code> - Ability to draw others to you</li><li><code>Confidence</code> - Being sure of yourself</li><li><code>Credibility</code> - Being trusted and believed in</li><li><code>Clarity &amp; Conciseness</code></li></ul><h3><span id="networking">Networking</span></h3><h3><span id="professional-organizations">Professional Organizations</span></h3><h3><span id="managing-up">Managing Up</span></h3><p>Managing Up is about being confident in who you are as an administrative support professional.</p><ul><li>Make each day run smoothly for your executive</li><li>Build a solid relationship founded on trust</li><li>Be a subject matter expert</li></ul><h3><span id="managing-sideways">Managing Sideways</span></h3><p>Managing the outcomes of situations and the people who impact them without having formal authority to do so.</p><ul><li>Act with confidence</li><li>Establish relationships with every colleague</li><li>Learn the organization’s departments and functions</li><li>Recognize others’ strengths</li></ul><h3><span id="managing-down">Managing Down</span></h3><p>Work effectively with employees who report to you</p><ul><li>Be the type of boss that you want to be supervised by</li><li>Provide inspiration and motivation for your direct reports to do well</li><li>Ensure that your direct reports have the tools, resources, training and direction they need</li><li>Practice teamwork consistently</li></ul><h3><span id="goal-setting">Goal Setting</span></h3><p>SMART Goal</p><ul><li>Specific</li><li>Measurable</li><li>Achivable</li><li>Results-focused</li><li>Time-bound</li></ul><h3><span id="office-politics-and-gossip">Office politics and gossip</span></h3><ul><li>Maintain healthy, positive energy</li><li>Treat people with dignity and respect</li><li>Really listen to people</li></ul><h2><span id="reference">Reference</span></h2><ul><li><a href="https://www.linkedin.com/learning/administrative-professional-tips/keeping-the-gate-2?collection=urn%3Ali%3AlearningCollection%3A6506364337203056640&amp;u=3322" target="_blank" rel="noopener">Administrative Professional Tips</a></li><li><a href>The Brand Called You</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#keeping-the-gate&quot;&gt;Keeping the gate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#personal-branding-clear-powerful-and-compelling-pu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Negociation Foundations</title>
    <link href="http://yoursite.com/2019/12/15/Negociation%20Foundations/"/>
    <id>http://yoursite.com/2019/12/15/Negociation Foundations/</id>
    <published>2019-12-14T16:00:00.000Z</published>
    <updated>2019-12-27T22:54:29.778Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#basics-of-negotiation">Basics of Negotiation</a><ul><li><a href="#interest-based-negotiation">Interest-Based Negotiation</a><ul><li><a href="#the-negotiation-mindset">The Negotiation Mindset</a></li><li><a href="#the-three-core-negotiation-practices">The Three Core Negotiation Practices</a></li><li><a href="#anchoring-and-framing">Anchoring and Framing</a></li><li><a href="#listening-and-building-tactical-empathy">Listening and building tactical empathy</a></li></ul></li><li><a href="#getting-ready-for-a-negotiation">Getting Ready for a Negotiation</a><ul><li><a href="#negotiation-preparations">Negotiation Preparations</a></li></ul></li><li><a href="#engaging-your-allies">Engaging Your Allies</a></li><li><a href="#six-principle-of-influence">Six principle of influence</a><ul><li><a href="#reciprocity">Reciprocity</a></li><li><a href="#consistency">Consistency</a></li><li><a href="#social-proof">Social Proof</a></li><li><a href="#liking">Liking</a></li><li><a href="#authority">Authority</a></li><li><a href="#scarcity">Scarcity</a></li></ul></li></ul></li><li><a href="#reference">Reference</a></li></ul><!-- tocstop --><h2><span id="basics-of-negotiation">Basics of Negotiation</span></h2><h3><span id="interest-based-negotiation">Interest-Based Negotiation</span></h3><ul><li>Change your approach from transactional to relational by slow things down and getting connected</li><li>Make space for objections and pushback</li></ul><p><img src="/images/Negotiation-Framework.jpeg" alt="Negociation Framework"></p><h4><span id="the-negotiation-mindset">The Negotiation Mindset</span></h4><ul><li>Conversation in which you are trying to get something you want</li><li>Goal is to find a way to agreement</li><li>Requires curiosity and creativity</li></ul><h4><span id="the-three-core-negotiation-practices">The Three Core Negotiation Practices</span></h4><p>Negotiation needs to be slow and relational as opposed to fast and transactional.</p><ul><li>Check in with your conversation partner to receive their full attention</li><li>Get connected<ul><li>Add social glue</li></ul></li><li>Ask diagnostic questions<ul><li>Begin with who, what, when, where, how and why to unlock your patner’s interest</li></ul></li></ul><h4><span id="anchoring-and-framing">Anchoring and Framing</span></h4><ul><li><p>Concept</p><ul><li><code>Anchoring</code> - Landing an idea or request</li><li><code>Framing</code> - Building a perspective</li></ul></li><li><p>When Anchoring and Framing</p><ul><li>Tie requests to quantifiable, business case reasons</li><li>Finish with diagnostic question</li><li>Resist negociating against yourself</li></ul></li></ul><h4><span id="listening-and-building-tactical-empathy">Listening and building tactical empathy</span></h4><ul><li>Tactical Listening<ul><li>Using body language and what’s being said or not said</li></ul></li><li>Tactical Listening Skills<ul><li>Labeling</li><li>Mirroring</li><li>Slience</li></ul></li></ul><h3><span id="getting-ready-for-a-negotiation">Getting Ready for a Negotiation</span></h3><h4><span id="negotiation-preparations">Negotiation Preparations</span></h4><ul><li><code>Define what you want</code></li><li><code>Research</code> - Define how what you want will benefit the other party</li><li><code>Write an opening statement</code> - You have the raw material you need to script out and memorize your opening statement. Your opening statement establishes your anchor, let’s say a promotion. and frames it with a value you’re poised to deliver. It’s mapping your strengths and skills to the goals and results that are important to your partner.</li><li><code>List potential pushbacks</code> - For every no, you want to draft a diagnostic question.</li><li><code>Identifying priorities and designing options</code></li></ul><h3><span id="engaging-your-allies">Engaging Your Allies</span></h3><p>Why we negotiate? <code>We want something we do not have</code>! Humans being human, we set out to convince our negotiation partners that what we want is what they should want but persuading people to see things our way is rarely a winning strategy. We might be so persuasive that we’re successful in the short-term but in the long-term, <code>using persuasion tactics alone is hard on relationships personal and professional</code>.</p><h3><span id="six-principle-of-influence">Six principle of influence</span></h3><p>Article: <a href="https://medium.com/@alyjuma/the-6-principles-of-influence-how-to-master-persuasion-2f8c581da38b" target="_blank" rel="noopener">The 6 Principles of Influence: How To Master Persuasion</a></p><ul><li><strong>Reciprocity</strong>: responding to a positive action with another positive action</li><li><strong>Consistency</strong>: doing what you say you are going to do</li><li><strong>Social proof</strong>: conforming to custom or group behavior</li><li><strong>Liking</strong>: being influenced by those who are like us</li><li><strong>Authority</strong>: obeying or believing people in positions of power</li><li><strong>Scarcity</strong>: having a limited supply will created demand</li></ul><p><code>Influence is power. Maybe even a super power</code>. Imagine being able to harness influence as a skill. To be able to use it when the situation calls. The truth is, this is more possible than you may have thought, thanks to research done over the years.</p><p>One book in particular has had the biggest impact in this field: Robert Cialdini’s Influence. In it, Cialdini introduces the 6 principles of influence that will help you persuade others. Theses 6 principles are reciprocity, consistency, social proof, liking, authority, and scarcity.<br>“<code>I think the power of persuasion would be the greatest super power of all time.</code>”</p><p>Persuasion as a superpower is very much within reach. In this post, we’ll explore these six principles more closely and how you can use them. And if you want to learn more, be sure to check out the book.</p><h4><span id="reciprocity">Reciprocity</span></h4><p>One of the most basic principles of influence is to simply <code>give that which you want to receive</code>. In other words, doing right by others is a good way to get others to do the same for you. This idea of reciprocity is a powerful one. There are a couple of ways to have this reciprocity work for you. Giving others small gifts, treating others with respect, and doing favors for those in need, are all things that can win you points with other individuals. So a good approach is to always help others and be kind when you have the opportunity, because you never know how it may help you down the line. Moreover, it is these small acts of kindness that will be remembered and come in handy when you’re in need of a favor yourself.</p><h4><span id="consistency">Consistency</span></h4><p>The principle of consistency is <code>based on the power of active, public, and voluntary commitments, which results in people actually sticking to their word</code>. Let’s walk through these requirements in a little more detail. The first part is an active commitment. By active, Cialdini means something that is written or spoken to other’s. Having people say they will do something is a start, but when they actively commit to it they’re much more likely to follow through.<br>The next piece is <code>making it public</code>. When other’s witness this commitment, it adds a level of accountability to the statement. And no one wants to go back on their word.<br>Finally, it has to <code>be voluntary</code>. If you force someone to make an active, public commitment that they didn’t decide on themselves, you’ve accomplished nothing.<br>So how do you use this? Once you’ve persuaded someone to do something, get them to make these types of commitments to implement the principle of consistency and <code>ensure there is a legitimate commitment to their words</code>.</p><h4><span id="social-proof">Social Proof</span></h4><p>People rely on social cues from others on how to think, feel, and act in many situations. And not just any people, but peers. <code>People they believe are similar to them</code>. This is a key point and what is called <code>social proof</code>.<br>So if you wanted to influence your interns or a particular team in your department or the new hires, you need to get one of them to buy in first. When they see an employee like themselves seemingly taking action on their own or following a new directive, they are more probable to follow suit.<br>Having that first person take action makes all the difference and unlocks the power of social proof.</p><h4><span id="liking">Liking</span></h4><p><code>People like those who like them or who they perceive as friends</code>. It’s a <code>simple, yet powerful idea</code>. The principle of liking can be used in a few different ways.<br>One method is <code>finding common ground with the people you meet</code>. If you can connect with them on their hobbies or interests, you’ll have a solid ground to build from. Being observant of people is a great way to pick up on any clues that may lead you to such common ground.<br>The other approach is <code>genuine praise</code>. Paying compliments and being charming can go along way to building a positive rapport with others. A word of warning though, don’t go overboard. The key here is <code>genuine praise</code>, don’t manufacture it to the point that you’re clearly trying to butter them up.</p><h4><span id="authority">Authority</span></h4><p>When you are <code>perceived as an expert in an area, other’s will be more likely to defer to you</code>. Why? Often because experts are able to offer a shortcut to good decisions that would otherwise take a long time to devise themselves. The idea then is to <code>establish that credibility of authority and expertise</code>.<br>Many often miss this opportunity because they assume others will identify their expertise automatically. You can’t leave it up to interpretation because it will often be overlooked.<br>There are a number of ways to establish such authority. A quick and easy one is to <code>make visible all diplomas, credentials, and awards in the office or workplace to establish your background</code>. Of course this may not always be an option. Another approach is to <code>convey expertise through short anecdotes or background information shared in casual conversations</code>.<br>Just remember, your expertise isn’t always a known quantity, so be sure to convey it when you get the chance.</p><h4><span id="scarcity">Scarcity</span></h4><p><code>People value what is scarce</code>. It’s just basic supply and demand. As things become more scarce, they becoming more valuable to others. There are a few ways that you can use the principle of scarcity to persuade others. One is simply to <code>make offers limited-time, limited-supply, or one-time, which immediately creates a sense of scarcity</code>.<br>At the same time, how you present such opportunities matters too. If you <code>focus more on loss language, or language that demonstrates what you will lose out on rather than gain, your message becomes more powerful</code>.<br>Finally is the <code>exclusivity approach</code>. Providing access to information, services, or other items to a limited set of people creates a sense of exclusiveness. This often gets translated into being a favor to those people or that you value them more than others.<br>If you can combine all of these to frame a situation, your powers of persuasion greatly increase. So try to utilize limited offers, loss language, and exclusivity, to create a sense of scarcity.</p><p>Mastering these six principles of influence will enable you to maximize your abilities of persuasion. But a word of warning. Don’t abuse these skills. They can easily be used to manipulate and control others.<br>“<code>Character may almost be called the most effective means of persuasion.</code>”</p><p>Cialdini is clear to say in his own writing, these principles of influence should be used from a place of good, with your influence being authentic, genuine, and leading others to the best decisions, not only for themselves, but everyone else.<br>Use it the right way, and you’ll reap the rewards.</p><h2><span id="reference">Reference</span></h2><ul><li><a href="https://www.linkedin.com/learning/negotiation-foundations/developing-a-negotiation-mindset?collection=urn%3Ali%3AlearningCollection%3A6506364337203056640&amp;u=3322" target="_blank" rel="noopener">Negotiation Foundations</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#basics-of-negotiation&quot;&gt;Basics of Negotiation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#interest-based-negotiation&quot;&gt;Interest-Base
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Data Theory - Mathematics, Statistics and Learning</title>
    <link href="http://yoursite.com/2019/10/16/Data%20&amp;&amp;%20Learning%20Theory/"/>
    <id>http://yoursite.com/2019/10/16/Data &amp;&amp; Learning Theory/</id>
    <published>2019-10-15T16:00:00.000Z</published>
    <updated>2019-11-09T04:05:19.698Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#thinking">Thinking</a></li><li><a href="#references">References</a></li><li><a href="#future-plan">Future Plan</a></li></ul><!-- tocstop --><p>In this artical, I just want to list some critical points that helps me when I learn data related tooling and theory, such as Mathematics, Statistics and Learning theory</p><h3><span id="thinking">Thinking</span></h3><ul><li><p>The world is just data and theory, if we want to understand the world, what we need is data and underlying theory.</p><ul><li><code>Why do we need to understand data</code>?<ul><li>Data understanding is the previous step to <code>do prediction, make decision and take action</code>.</li></ul></li><li><code>How to understand structured data</code>?<ul><li><code>Statistics is most important mathematical tool and view to learn data</code>. Other technics related to data understanding includes Data Mining, Data Analysis, Machine Learning and specific business logic.</li><li>Other modeling theory also helps a lot, includes <code>Mathematics, Finance, Economics, Psychology, Physics, Sociology, Biology, Literature, Computer Science etc</code>….</li><li><code>Good Mathematics is really important</code> to learn and modeling other areas</li></ul></li><li><code>How about unstructured data</code>?<ul><li>Most book and information are unstructured data, we need extract the information we need according to the learning goal and use structured data analysis tool.</li><li>Research better learning theory to learn unstructured data directly.</li></ul></li></ul></li><li><p>Great learning method</p><ul><li><code>Question, My-Solution, Official-Solution</code><ol><li>First of all, we need to have a great question/problem to solve which leads our research and learning. <code>Defining the right question is one of the most important step</code> for any action.</li><li>With the right question, we can try to think about the solution</li><li>After my own solution and difficulties are brought up, we can refer the official solution from textbook and see what’s the difference.</li><li>Go through the top level question to low level question in this way layer by layer.</li></ol></li><li></li></ul></li></ul><h3><span id="references">References</span></h3><ul><li>概率论与数理统计（英文第四版）</li><li>Deep Learning</li><li>An Introduction To Statistical Learning</li><li>Deep learning courses in Edx (MS Library) </li></ul><h3><span id="future-plan">Future Plan</span></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#thinking&quot;&gt;Thinking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#future-plan&quot;&gt;Future 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Wealth Thinking</title>
    <link href="http://yoursite.com/2019/10/15/Wealth%20Thinking/"/>
    <id>http://yoursite.com/2019/10/15/Wealth Thinking/</id>
    <published>2019-10-14T16:00:00.000Z</published>
    <updated>2019-10-16T03:04:42.700Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><!-- tocstop --><ul><li><a href="https://en.wikipedia.org/wiki/Economy" target="_blank" rel="noopener">Wikipedia Economics</a><ul><li>An economy is an area of the production, distribution and trade, as well as consumption of goods and services by different agents</li><li>一个比较简单个人的定义：一个国家的产能，产能价格由全球供需决定。所以<code>一个国家要根据自身和国际政治经济形势，决定生产什么，不生产什么，进口什么，出口什么，制定什么样的政策来干预这些经济活动</code>。以获取自身最大的经济增长。一个国家的商业经济发达，国家通过税收才能富有，才能跟其他国家的公司（私有或者国有）购买更多东西，从而实现富强。但这是基于全球自由贸易(WTO)的基础的玩法，一旦强势国家使用手段建立贸易壁垒和进行经济制裁，一些在处于经济战略劣势的国家将无法在发展。</li></ul></li><li><a href="https://en.wikipedia.org/wiki/Finance" target="_blank" rel="noopener">Wikipededia Finance Definition</a> <ul><li>Finance is a field that is concerned with the <code>allocation (investment) of assets and liabilities over space and time, often under conditions of risk or uncertainty</code>.Finance can also be defined as the art of money management. Participants in the market aim to price assets based on their risk level, fundamental value, and their expected rate of return. Finance can be split into three sub-categories: <code>public finance, corporate finance and personal finance</code></li></ul></li><li><a href="https://www.youtube.com/watch?v=geoe-6NBy10&amp;list=PL8dPuuaLjXtPNZwz5_o_5uirJ8gQXnhEO&amp;index=15" target="_blank" rel="noopener">Import, Export &amp;&amp; Exchange Rate</a><ul><li>If import &gt; export, then money flows to other country</li><li>If export &gt; import, then mony flows to our country</li><li>汇率由外汇市场成交价决定，汇率会调节外贸商、外企的进出口决策，从而影响国家经济</li><li>Reference<ul><li><a href="https://www.youtube.com/watch?v=Nqsb1aaGZ9Q" target="_blank" rel="noopener">中美贸易战 vs 美日贸易战</a></li></ul></li></ul></li><li>Bubble<ul><li>What’s a Bubble?</li><li>My definition: <code>A bubble is a result/prediction description of a product price fast drop from a high price caused by change of supply and demand ratio</code>. 所以价格崩溃的概率，决定是否是 Bubble 的概率。比如钻石的价格一直很高，说明整个产业链对供需影响的很好，以保证价格不崩溃。关键是不做最后接盘的人。</li></ul></li><li>经济分析<ul><li>本质上是<code>经济数据的分析</code>，没有数据的分析，都是瞎猜。但<code>这些经济数据不会掌握在个人手里，经济数据的分析在于预测和制定合理的干预政策</code>，目的就是 Insight &amp;&amp; Action，之后有了人工智能，经济分析会更加智能</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;!-- tocstop --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Economy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wikipedia Economics&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Design Thinking</title>
    <link href="http://yoursite.com/2019/09/14/Design%20Thinking/"/>
    <id>http://yoursite.com/2019/09/14/Design Thinking/</id>
    <published>2019-09-14T08:34:54.258Z</published>
    <updated>2019-09-15T10:08:08.869Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="whats-design-thinking">What’s design thinking?</span></h1><p><img src="/images/Design-Thinking-Process.jpg" alt="Design Thinking Process"></p><h1><span id="reference">Reference</span></h1><ul><li><a href="https://www.douban.com/note/530429694/?dt_platform=com.douban.activity.wechat_friends&amp;dt_dapp=1" target="_blank" rel="noopener">Design Thinking Introduction - 豆瓣</a></li><li><a href="https://zhuanlan.zhihu.com/p/23816631" target="_blank" rel="noopener">设计思维：定义问题和头脑风暴</a></li><li><a href="https://www.linkedin.com/learning/learning-design-thinking-lead-change-in-your-organization/skill-of-a-design-thinking-leader?autoplay=true&amp;u=3322" target="_blank" rel="noopener">Design Thinking - LinkedIn Learning</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;whats-design-thinking&quot;&gt;What’s design thinking?&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Design-Thinking-Process.jpg&quot; alt=&quot;Design Thinki
      
    
    </summary>
    
    
      <category term="Design Thinking" scheme="http://yoursite.com/tags/Design-Thinking/"/>
    
  </entry>
  
  <entry>
    <title>Over-Communicate Strategy</title>
    <link href="http://yoursite.com/2019/07/03/Over-Communicate%20Strategy/"/>
    <id>http://yoursite.com/2019/07/03/Over-Communicate Strategy/</id>
    <published>2019-07-02T16:00:00.000Z</published>
    <updated>2019-09-13T08:35:47.694Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="over-communicate-core-idea">Over communicate core idea</span></h3><p>Core strategy would be</p><ol><li>Over communicate first</li><li>Ajust communicate degree</li></ol><p>Find the balance communication point when communicate using emails or teams</p><ul><li>right people<ul><li>Add different bosses for awareness and then ask them for feedback</li></ul></li><li>right content</li><li>right time<ul><li>Timing is important</li><li>If its too early, that’s OK, more like over communicate</li><li>If its too late, it’s more like escalation</li></ul></li><li>right attitude<ul><li>Don’t be afraid to be blamed for over communicate with boss!!</li><li>Don’t be shy to show off to boss!!</li><li>May be they would like to loop in</li><li>Different bosses has different preferences for being looped in.</li></ul></li><li>feedback loop<ul><li>Ask them for feedback about over communicate and ajust the volumn to balance</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;over-communicate-core-idea&quot;&gt;Over communicate core idea&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Core strategy would be&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Over communicate firs
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Great Internet Resources</title>
    <link href="http://yoursite.com/2019/06/15/Great%20Resources/"/>
    <id>http://yoursite.com/2019/06/15/Great Resources/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2019-06-22T13:53:52.223Z</updated>
    
    <content type="html"><![CDATA[<p>Put all the great internet resources here for future reference</p><h3><span id="architecture">Architecture</span></h3><ul><li><p>Data</p><ul><li><a href="https://www.youtube.com/watch?v=xAiuLJtCZOg" target="_blank" rel="noopener">NewSQL 大神黄东旭：从 0 到 1，如何设计一个分布式数据库</a></li></ul></li><li><p>Web</p><ul><li><a href="https://medium.com/welldone-software/an-overview-of-javascript-testing-in-2019-264e19514d0a" target="_blank" rel="noopener">An Overview Of Javascript Testing</a></li></ul></li><li><p>Engineering</p><ul><li><a href="https://learning.oreilly.com/library/view/domain-driven-design-distilled/9780134434964/ch04.html#ch04" target="_blank" rel="noopener">Domain Driven Design Distilled</a></li><li><a href="https://learning.oreilly.com/library/view/implementing-domain-driven-design/9780133039900/pref03lev2sec15.html" target="_blank" rel="noopener">Implement Domain Driven Design</a></li><li><a href="https://www.linkedin.com/learning/devops-foundations/what-is-devops?u=3322" target="_blank" rel="noopener">DevOps Foundations</a></li><li><a href="https://www.linkedin.com/learning/agile-software-development/the-agile-approach?u=3322" target="_blank" rel="noopener">Agile Software Development</a></li></ul></li><li><p>Recommendation &amp;&amp; Ads &amp;&amp; Search &amp;&amp; Audience</p><ul><li><a href="https://zhuanlan.zhihu.com/p/51015148" target="_blank" rel="noopener">推荐&amp;搜索&amp;广告&amp;用户画像&amp;深度学习整理</a></li><li><a href="https://github.com/jyfeather/ad-reading" target="_blank" rel="noopener">computational advertising reading list</a></li><li><a href="https://github.com/wzhe06/Reco-papers" target="_blank" rel="noopener">推荐系统论文、学习资料、业界分享</a></li><li><a href="https://github.com/wzhe06/Ad-papers" target="_blank" rel="noopener">计算广告论文、学习资料、业界分享</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Put all the great internet resources here for future reference&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;architecture&quot;&gt;Architecture&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PM Growth Foundations</title>
    <link href="http://yoursite.com/2019/06/14/PM%20Growth%20Foundations/"/>
    <id>http://yoursite.com/2019/06/14/PM Growth Foundations/</id>
    <published>2019-06-13T16:00:00.000Z</published>
    <updated>2019-06-15T01:17:23.371Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/xumin.jpg" alt="flower"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/xumin.jpg&quot; alt=&quot;flower&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Domain Driven Design</title>
    <link href="http://yoursite.com/2019/05/19/Domain%20Driven%20Design/"/>
    <id>http://yoursite.com/2019/05/19/Domain Driven Design/</id>
    <published>2019-05-18T16:00:00.000Z</published>
    <updated>2019-06-15T01:21:49.038Z</updated>
    
    <content type="html"><![CDATA[<p>Bounded Context, Domain, Event Storming etc</p><h2><span id="core-conecepts">Core Conecepts</span></h2><ul><li>Stategic Design</li><li>Bounded Context</li><li>Ubiquitous Language</li><li>Domain Expert</li><li><p>Subdomain</p><ul><li>Core Subdomain</li><li>Supporting Subdomain</li><li>Generic Subdomain</li></ul></li><li><p>Context Mapping</p><ul><li>Partnership</li><li>Shared Kernel</li><li>Customer-Supplier</li><li>Conformist</li><li>Anticorruption Layer</li><li>Open Host Service</li><li>Published Language</li></ul></li><li><p>Aggregate</p></li><li><a href="https://learning.oreilly.com/library/view/domain-driven-design-distilled/9780134434964/ch07.html#ch07" target="_blank" rel="noopener">Event Storming</a></li><li>Domain Event - It’s actually a result driven. ‘Product Created’</li><li>User Story</li></ul><h2><span id="summary">Summary</span></h2><p>We begin with the all-important <code>strategic design</code>. You really cannot apply tactical design in an effective way unless you begin with strategic design. Strategic design is used like broad brushstrokes prior to getting into the details of implementation. It highlights what is strategically important to your business, how to divide up the work by importance, and how to best integrate as needed.</p><p>First you will learn how to segregate your domain models using the strategic design pattern called <code>Bounded Contexts</code>. Hand in glove, you will see how to develop a <code>Ubiquitous Language</code> as your domain model within an explicitly Bounded Context.</p><p>You will learn about the importance of engaging with not only developers but also <code>Domain Experts</code> as you develop your model’s Ubiquitous Language. You will see how a team of both software developers and Domain Experts collaborate. This is a vital combination of smart and motivated people who are needed for DDD to produce the best results. The language you develop together through collaboration will become ubiquitous, pervasive, throughout the team’s spoken communication and software model.</p><p>As you advance further into strategic design, you will learn about <code>Subdomains</code> and how these can help you deal with the unbounded complexity of legacy systems, and how to improve your results on greenfield projects. You will also see how to integrate multiple Bounded Contexts using a technique called <code>Context Mapping</code>. Context Maps define both team relationships and technical mechanisms that exist between two integrating <code>Bounded Contexts</code>.</p><p>After I have given you a sound foundation with strategic design, you will discover DDD’s most prominent tactical design tools. <code>Tactical design</code> is like using a thin brush to paint the fine details of your domain model. One of the more important tools is used to <code>aggregate entities and value objects</code> together into a right-sized cluster. It’s the <code>Aggregate pattern</code>.<br>DDD is all about modeling your domain in the most explicit way possible. <code>Using Domain Events will help you both to model explicitly and to share what has occurred within your model with the systems that need to know about it</code>. The interested parties might be your own local Bounded Context and other remote Bounded Contexts.</p><h2><span id="reference">Reference</span></h2><ul><li><a href="https://learning.oreilly.com/library/view/domain-driven-design-distilled/9780134434964/ch04.html#ch04" target="_blank" rel="noopener">Domain Driven Design Distilled</a></li><li><a href="https://learning.oreilly.com/library/view/implementing-domain-driven-design/9780133039900/pref03lev2sec15.html" target="_blank" rel="noopener">Implement Domain Driven Design</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bounded Context, Domain, Event Storming etc&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;core-conecepts&quot;&gt;Core Conecepts&lt;/span&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Stategic Design&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leadership Foundations</title>
    <link href="http://yoursite.com/2019/05/19/Leadership%20Foundations/"/>
    <id>http://yoursite.com/2019/05/19/Leadership Foundations/</id>
    <published>2019-05-18T16:00:00.000Z</published>
    <updated>2019-06-15T01:17:23.370Z</updated>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/files/Leadership_Fundamentals_Handouts.pdf" width="100%" height="550" type="application/pdf"></div><h3><span id="when-are-you-leading">When are you leading</span></h3><ul><li>The primary goal of leadership is <strong>produce change and growth</strong></li><li>The primary goal of management is <strong>produce order and consistency</strong></li></ul><h3><span id="the-balancing-art">The balancing art</span></h3><ul><li>Be clear to yourself as to what you are doing and why?</li><li>Be clear to with your team</li><li>Tend to both leading and managing</li></ul><h3><span id="reference">Reference</span></h3><ul><li><a href="https://www.linkedin.com/learning/leadership-foundations/welcome?u=3322" target="_blank" rel="noopener">Leadership Foundations</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/files/Leadership_Fundamentals_Handouts.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Agile Management</title>
    <link href="http://yoursite.com/2019/04/20/Agile%20Management/"/>
    <id>http://yoursite.com/2019/04/20/Agile Management/</id>
    <published>2019-04-19T16:00:00.000Z</published>
    <updated>2019-06-15T01:44:11.821Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#agile-fundamentals">Agile Fundamentals</a><ul><li><a href="#conclusion">Conclusion</a></li><li><a href="#aigle-to-the-rescue">Aigle to the Rescue</a></li><li><a href="#agile-menifesto">Agile Menifesto</a></li><li><a href="#principles-behind-the-agile-manifesto">Principles behind the Agile Manifesto</a></li></ul></li><li><a href="#scrum-the-developer-perspective">Scrum: The Developer Perspective</a></li><li><a href="#agile-software-engineering-techniques">Agile Software Engineering Techniques</a></li><li><a href="#time-estimation">Time Estimation</a><ul><li><a href="#reference">Reference</a></li></ul></li></ul><!-- tocstop --><h2><span id="agile-fundamentals">Agile Fundamentals</span></h2><h3><span id="conclusion">Conclusion</span></h3><ul><li>With Agile in mind that change is inevitable and we need to make full use of developer’s creativity and knowledge to build a better software. <code>We do high level planning and execute with agile in mind in every level for everyone</code></li></ul><h3><span id="aigle-to-the-rescue">Aigle to the Rescue</span></h3><ul><li>Change is inevitable</li><li>Software development is inherently risky</li><li>Successful software projects are dependent on creativity and knowledge of the development team</li><li>Detailed processes and predictive planning from top-down management can be impediment</li></ul><h3><span id="agile-menifesto">Agile Menifesto</span></h3><ul><li><a href="https://agilemanifesto.org" target="_blank" rel="noopener">Agile Menifesto Link</a></li><li>Individuals and interactions over processes and tools</li><li>Working software over comprehensive documentation</li><li>Customer collaboration over contract negotiation</li><li>Responding to change over following a plan</li></ul><h3><span id="principles-behind-the-agile-manifesto">Principles behind the Agile Manifesto</span></h3><ul><li><p><a href="https://agilemanifesto.org/" target="_blank" rel="noopener">Principles behind the Agile Manifesto Link</a></p></li><li><p>Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.</p></li><li><p>Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage.</p></li><li><p>Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.</p></li><li><p>Business people and developers must work together daily throughout the project.</p></li><li><p>Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.</p></li><li><p>The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.</p></li><li><p>Working software is the primary measure of progress.</p></li><li><p>Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.</p></li><li><p>Continuous attention to technical excellence and good design enhances agility.</p></li><li><p>Simplicity–the art of maximizing the amount of work not done–is essential.</p></li><li><p>The best architectures, requirements, and designs emerge from self-organizing teams.</p></li><li><p>At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.</p></li></ul><h2><span id="scrum-the-developer-perspective">Scrum: The Developer Perspective</span></h2><ul><li><a href="https://www.scrumguides.org/" target="_blank" rel="noopener">Scrum Guide Link</a>. Scrum is a framework for developing and sustaining complex products.</li><li>More abstract in nature</li></ul><h2><span id="agile-software-engineering-techniques">Agile Software Engineering Techniques</span></h2><p>Compare with Scrum, XP is more prescriptive and implementation centric.</p><ul><li>Exetreme Programming (XP)</li><li>Pair programming - One of the key practices of Extreme Programming</li><li>TDD, BDD,</li><li>User Story:<ul><li>One Side: As a XXX, I should be able to XXX, so I know how I am being billed.</li><li>Another Side: Acceptance Criteria</li></ul></li><li>Kanban - A visual process management tool</li><li>Agile Estimation:<ul><li>Fibonacci Scale: 0 1 2 3 5 8 13</li><li>Exponitial Scale: 0 1 2 4 8 16</li><li>Planning Poker: Esimate on consensus</li></ul></li></ul><h2><span id="time-estimation">Time Estimation</span></h2><p>Different work item types have different estimation strategies, the work item pattern could be</p><ul><li>Research<ul><li>[3X][hard to estimate] <strong>Research to clearify the context</strong>, the more details, the accurate, <strong>time of this part could be unlimited, the more the better</strong>, 3X</li></ul></li><li>Learning<ul><li>[1.5X][easy to estimate] <strong>New technology ramp up</strong>, basic new technology is surely needed before start to work, with well prepared training materails, <strong>the time is fixed and easy to control</strong></li></ul></li><li>Design<ul><li>[2.5X][mediate to esitmate] <strong>System design</strong>, the more times we iterate in this stage, the better</li></ul></li><li>Coding<ul><li>[2X][mediate to estimate] <strong>Writing code based on previous stage</strong>, during this time, need to prepare<ul><li>Dependency project management</li><li>Clear</li></ul></li></ul></li><li>Testing</li></ul><h3><span id="reference">Reference</span></h3><ul><li><a href="https://www.linkedin.com/learning/agile-software-development/the-agile-approach?u=3322" target="_blank" rel="noopener">Agile Software Development</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#agile-fundamentals&quot;&gt;Agile Fundamentals&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Achitecture Foundations</title>
    <link href="http://yoursite.com/2019/04/20/Architecture%20Foundations/"/>
    <id>http://yoursite.com/2019/04/20/Architecture Foundations/</id>
    <published>2019-04-19T16:00:00.000Z</published>
    <updated>2019-05-22T23:22:38.062Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#software-achitecture-introduction">Software Achitecture Introduction</a></li><li><a href="#traditional-architect">Traditional Architect</a></li><li><a href="#agile-architecutre">Agile Architecutre</a></li><li><a href="#thinking-architectually">Thinking Architectually</a></li><li><a href="#architectural-patterns">Architectural Patterns</a></li><li><a href="#architectural-management">Architectural Management</a></li></ul><!-- tocstop --><h3><span id="software-achitecture-introduction">Software Achitecture Introduction</span></h3><ul><li>Choose the component and connect them together</li><li>All effective architecture reflect the needs of your customers and of the domain or business</li><li>Start with the customers and works down towards the implementation</li><li>Work extensively as programmers in order to build that aesthetic sense</li></ul><h3><span id="traditional-architect">Traditional Architect</span></h3><ul><li>The cerntralized architect does all the thinking, everybody else does what whey’re told</li><li>Big and complex designs<ul><li>Code is written after design</li><li>Doesn’t capture the user’s true needs</li><li>Doesn’t allow for learning</li></ul></li><li>Lack of flexibility<ul><li>Painful bureaucratic processes</li><li>Not following the design</li><li>Random improvisation</li></ul></li><li>Slow developemnt process<ul><li>Centralized architect-making decisions</li><li>Wasted time and money</li></ul></li><li>Use code and draw together to decribe design</li></ul><h3><span id="agile-architecutre">Agile Architecutre</span></h3><ul><li>Inspect and Adapt Loop<ul><li>Build/refine -&gt; Deploy -&gt; Review -&gt; Talk to users</li><li>Run experiment if you</li><li>Learn and design incrementally as the system involves</li></ul></li><li>Agile<ul><li>Everybody is an architect</li><li>Nobody asks permission to expriement</li></ul></li><li>Agile Architect - Servant Leader<ul><li>Teaching</li><li>Coaching</li><li>Coordinating</li></ul></li><li>Main design reponsibility: assures coherence across the system<ul><li>Reviews work</li><li>Makes suggestions</li><li>Helps refine processes</li></ul></li><li>Architects<ul><li>Keep big picture in their head</li><li>Say if we do this rather than that, we will doing better than xxx team</li><li>Helps team to fix problems</li><li>Nudges the structure of the architecture in the direction that their experiences tells them will work best</li><li>Help the team to make good decisions</li></ul></li><li>Good Architecture<ul><li>Simplicity</li><li>Maintainability</li><li>Testability</li></ul></li><li>Architecture &amp;&amp; Design Patterns<ul><li>Design patterns provide sets of optimal solutions</li><li>Architecture is the interaction of design patterns</li><li>The more systems you work with or on, the more you understand the trade-offs and interconnections</li></ul></li><li>Improve Technical Understanding<ul><li>Read Code</li><li>Study open-source projects</li><li>Education &amp;&amp; Reading</li><li>Go to vendor-focused conferences</li><li>Speak to other architects</li><li>Learn about technologies used in real systems</li><li>Write code</li><li>Create meetup</li><li>Work collabratively to solve problems</li><li>Design systems - Learn by practicing</li><li>Writing and Sharing</li></ul></li><li>Skilled architect must be skilled programmer</li></ul><h3><span id="thinking-architectually">Thinking Architectually</span></h3><ul><li>The architecutre of your software and the communication of your organizaiton has to match - Conway’s law</li><li>N-tier softeware is out of date</li><li>We use microservice</li><li>Incremental Design around user story</li><li>DDD</li><li>Bounded Context (Domain) - Class, Module, Package, Sub System</li></ul><h3><span id="architectural-patterns">Architectural Patterns</span></h3><ul><li>Monolith<br><img src="/images/monolith-architecture-time-consuming.png" alt="monolith"></li><li>Microkernel</li><li>Message-based architectures<ul><li>RMx</li><li>Message Bus</li><li>Pub/Sub Model (kafka’s architecture)</li></ul></li><li>Microservice<ul><li>Book Reference (<a href="https://learning.oreilly.com/library/view/building-microservices/9781491950340/" target="_blank" rel="noopener">Building Microservices</a>)</li></ul></li><li>Reactive Pattern</li></ul><h3><span id="architectural-management">Architectural Management</span></h3><ul><li>Learn from Alibaba, Facebook, Google<ul><li>Team technical sharing culture</li><li><strong>Cooperate and help first with redmond team</strong></li><li>Have v-team in mind</li><li>Great goal with great people<ul><li>Clear and great project first</li><li>Attract me to do this project</li></ul></li><li>Leadership for everyone<ul><li>Create Clarity</li><li>Generate Energy</li><li>Deliver Success</li></ul></li></ul></li></ul><p>Event Storming</p><p>Agent Tech - Messaging - - Caching - - Logging - - Monitoring -</p><p>Architects Do Research</p><ul><li>Programmers - Vendors - Conferences - Operations</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#software-achitecture-introduction&quot;&gt;Software Achitecture Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#traditional-arch
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dependency Network Research</title>
    <link href="http://yoursite.com/2019/04/20/Dependency%20Management/"/>
    <id>http://yoursite.com/2019/04/20/Dependency Management/</id>
    <published>2019-04-19T16:00:00.000Z</published>
    <updated>2019-12-15T01:15:55.362Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="dependency-network">Dependency Network</span></h2><p>One of the core area of Software Engineering is dependency management. This is also where micro-service come from. The core problem need to solve is </p><ul><li>How to split one big component to small components<ul><li>What’s the modularity of those small components ?<ul><li>Versioned component can not be too small, small versioned component can only be </li><li>Put small components that will be updated together into one big component</li><li></li></ul></li><li></li></ul></li></ul><h2><span id="reference">Reference</span></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;dependency-network&quot;&gt;Dependency Network&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;One of the core area of Software Engineering is dependency management. Th
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DevOps Foundations</title>
    <link href="http://yoursite.com/2019/04/20/DevOps%20Foundations/"/>
    <id>http://yoursite.com/2019/04/20/DevOps Foundations/</id>
    <published>2019-04-19T16:00:00.000Z</published>
    <updated>2019-06-15T01:17:23.369Z</updated>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="/files/DevOps_Fundamentals.pdf" width="100%" height="550" type="application/pdf"></div><!-- toc --><ul><li><a href="#chapter-1-devops-basics">Chapter 1: DevOps Basics</a><ul><li><a href="#what-is-devops">What Is DevOps?</a></li><li><a href="#devops-core-values-cams">DevOps Core Values: CAMS</a></li><li><a href="#devops-core-values-the-three-ways">DevOps Core Values: The Three Ways</a></li><li><a href="#your-devops-playbook">Your DevOps Playbook</a></li><li><a href="#ten-practices-for-devops-success-10-6">Ten Practices for DevOps Success: 10-6</a></li></ul></li><li><a href="#chapter-2-devops-a-culture-problem">Chapter 2: DevOps: A Culture Problem</a><ul><li><a href="#the-it-crowd-and-the-coming-storm">The IT Crowd and the Coming Storm</a></li><li><a href="#use-your-words">Use Your Words</a></li><li><a href="#throwing-things-over-walls">Throwing Things Over Walls</a></li><li><a href="#kaizen-continuous-improvement">Kaizen: Continuous Improvement</a></li></ul></li><li><a href="#chapter-3-the-building-blocks-of-devops">Chapter 3: The Building Blocks of DevOps</a><ul><li><a href="#devops-building-block-agile">DevOps Building Block: Agile</a></li><li><a href="#devops-building-block-lean">DevOps Building Block: Lean</a></li><li><a href="#itil-itsm-and-the-sdlc">ITIL, ITSM, and the SDLC</a></li></ul></li><li><a href="#chapter-4-infrastructure-automation">Chapter 4: Infrastructure Automation</a><ul><li><a href="#infrastructure-as-code">Infrastructure As Code</a></li><li><a href="#golden-image-to-foil-ball">Golden Image to Foil Ball</a></li><li><a href="#immutable-deployment">Immutable Deployment</a></li><li><a href="#your-infrastructure-toolchain">Your Infrastructure Toolchain</a></li></ul></li><li><a href="#chapter-5-continuous-delivery">Chapter 5: Continuous Delivery</a><ul><li><a href="#small-fast-better">Small + Fast = Better</a></li><li><a href="#continuous-integration-practices">Continuous Integration Practices</a></li><li><a href="#the-continuous-delivery-pipeline">The Continuous Delivery Pipeline</a></li><li><a href="#the-role-of-qa">The Role Of QA</a></li><li><a href="#your-ci-toolchain">Your CI Toolchain</a></li></ul></li><li><a href="#chapter-6-reliability-engineering">Chapter 6: Reliability Engineering</a><ul><li><a href="#engineering-doesnt-end-with-deployment">Engineering Doesn’t End With Deployment</a></li><li><a href="#design-for-operation-theory">Design For Operation - Theory</a></li><li><a href="#design-for-operation-practice">Design For Operation - Practice</a></li><li><a href="#operate-for-design-metrics-and-monitoring">Operate For Design: Metrics and Monitoring</a></li><li><a href="#operate-for-design-logging">Operate for Design: Logging</a></li><li><a href="#your-sre-toolchain">Your SRE Toolchain</a></li></ul></li><li><a href="#chapter-8-the-future-of-devops">Chapter 8: The Future of DevOps</a><ul><li><a href="#cloud-to-containers-to-serverless">Cloud to Containers to Serverless</a></li><li><a href="#reference">Reference</a></li></ul></li></ul><!-- tocstop --><h1><span id="chapter-1-devops-basics">Chapter 1: DevOps Basics</span></h1><h3><span id="what-is-devops">What Is DevOps?</span></h3><ul><li>DevOps - is the practice of operations and development engineers participating together through the entire service lifecycle; from the design and development process all the way to production support. DevOps is also characterized by operations staff making use of many of the same techniques as developers for their systems work.</li></ul><h3><span id="devops-core-values-cams">DevOps Core Values: CAMS</span></h3><ul><li>CAMS - Culture, Automation, Measurement, Sharing</li></ul><h3><span id="devops-core-values-the-three-ways">DevOps Core Values: The Three Ways</span></h3><ul><li><p>The Three Ways</p><ol><li>Systems Thinking</li><li>Amplifying Feedback Loops</li><li>A Culture of Continuous Experimentation and Learning</li></ol></li></ul><h3><span id="your-devops-playbook">Your DevOps Playbook</span></h3><ul><li><p>5 Key DevOps Methodologies</p><ol><li>People over Process over Tools</li><li>Continuous Delivery</li><li>Lean Management</li><li>Visible Ops style Change Control</li><li>Infrastructure as Code</li></ol></li></ul><p>Ten Practices for DevOps Success: 10-6</p><h3><span id="ten-practices-for-devops-success-10-6">Ten Practices for DevOps Success: 10-6</span></h3><p>10 Practices for DevOps Success</p><ol><li>Chaos Monkey</li><li>Blue/Green Deployments</li><li>Dependency Injection</li><li>Andon Cords</li><li>The Cloud</li><li>Embedded Teams</li><li>Blameless Postmortems</li><li>Status Pages</li><li>Developers On Call</li><li>Incident Command System</li></ol><h1><span id="chapter-2-devops-a-culture-problem">Chapter 2: DevOps: A Culture Problem</span></h1><h3><span id="the-it-crowd-and-the-coming-storm">The IT Crowd and the Coming Storm</span></h3><h3><span id="use-your-words">Use Your Words</span></h3><p>Blameless Postmortems contain:</p><ol><li>A description of the incident</li><li>A description of the root cause</li><li>How the incident was stabilized or fixed.</li><li>A timeline of events including all actions taken to resolve the incident</li><li>How the incident affected customers</li><li>Remediations and corrective actions.</li></ol><p>Transparent Uptime means:</p><ol><li>Admit Failure</li><li>Sound Like A Human</li><li>Have A Communication Channel</li><li>Above All Else, Be Authentic</li></ol><p>Do Unto Others</p><p>Trust Blockers:</p><ul><li>Lack of Context</li><li>Conflicting Goals</li></ul><h3><span id="throwing-things-over-walls">Throwing Things Over Walls</span></h3><h3><span id="kaizen-continuous-improvement">Kaizen: Continuous Improvement</span></h3><p>Kaizen - change for the better</p><p>Kaizen’s Guiding Principles</p><ul><li>Good processes bring good results</li><li>Go see for yourself to grasp the current situation (gemba)</li><li>Speak with data, manage by facts</li><li>Take action to contain and correct root causes of problems</li><li>Work as a team</li><li>Kaizen is everybody’s business</li></ul><h1><span id="chapter-3-the-building-blocks-of-devops">Chapter 3: The Building Blocks of DevOps</span></h1><h3><span id="devops-building-block-agile">DevOps Building Block: Agile</span></h3><h3><span id="devops-building-block-lean">DevOps Building Block: Lean</span></h3><ul><li><p>7 Principles of Lean Software Development</p><ul><li>ELIMINATE WASTE</li><li>AMPLIFY LEARNING</li><li>DECIDE AS LATE AS POSSIBLE</li><li>DELIVER AS FAST AS POSSIBLE</li><li>EMPOWER THE TEAM</li><li>BUILD INTEGRITY IN</li><li>SEE THE WHOLE</li></ul></li><li><p>The Seven Wastes (Muda) of Lean Software</p><ul><li>Waste #1 - Partially Done Work</li><li>Waste #2 - Extra Features</li><li>Waste #3 - Relearning</li><li>Waste #4 - Handoffs</li><li>Waste #5 - Delays</li><li>Waste #6 - Task Switching</li><li>Waste #7 - Defects</li></ul></li><li><p>Build-Measure-Learn</p><ul><li>BUILD – MINIMUM VIABLE PRODUCT</li><li>MEASURE – THE OUTCOME AND INTERNAL METRICS</li><li>LEARN – ABOUT YOUR PROBLEM AND YOUR SOLUTION</li><li>REPEAT – GO DEEPER WHERE IT’S NEEDED</li></ul></li></ul><h3><span id="itil-itsm-and-the-sdlc">ITIL, ITSM, and the SDLC</span></h3><h1><span id="chapter-4-infrastructure-automation">Chapter 4: Infrastructure Automation</span></h1><h3><span id="infrastructure-as-code">Infrastructure As Code</span></h3><h3><span id="golden-image-to-foil-ball">Golden Image to Foil Ball</span></h3><ul><li><p><strong>Provisioning</strong> is the process of making a server ready for operation, including hardware, OS, system services, network connectivity.</p></li><li><p><strong>Deployment</strong> is the process of automatically deploying and upgrading applications on a server.</p></li><li><p><strong>Orchestration</strong> is the act of performing coordinated operations across multiple systems.</p></li><li><p><strong>Configuration management</strong> is an overarching term dealing with change control of system configuration after initial provision, but is often also applied to maintaining and upgrading application and application dependencies.</p></li><li><p><strong>Imperative</strong> - also known as “procedural,” this is an approach where commands desired to produce a state are defined and executed.</p></li><li><p><strong>Declarative</strong> - also known as “functional,” this is an approach where you define a desired state and the tool converges the existing system on the model.</p></li><li><p><strong>Idempotent</strong> - the ability to execute the CM procedure repeatedly and end up in the same state each time.</p></li><li><p><strong>Self service</strong> - is the ability for an end user to kick off one of these processes without having to go through other people.</p></li></ul><h3><span id="immutable-deployment">Immutable Deployment</span></h3><h3><span id="your-infrastructure-toolchain">Your Infrastructure Toolchain</span></h3><ul><li><a href="https://aws.amazon.com/cloudformation/" target="_blank" rel="noopener">AWS Cloudformation</a></li><li><a href="https://azure.microsoft.com/en-us/documentation/templates/" target="_blank" rel="noopener">Azure ARM Templates</a></li><li><a href="https://www.terraform.io/" target="_blank" rel="noopener">Hashicorp Terraform</a></li><li><a href="http://www.ubuntu.com/cloud/juju" target="_blank" rel="noopener">Ubuntu Juju</a></li><li><a href="https://www.chef.io/" target="_blank" rel="noopener">Chef</a></li><li><a href="https://puppet.com/" target="_blank" rel="noopener">Puppet</a></li><li><a href="https://www.ansible.com/" target="_blank" rel="noopener">Ansible</a></li><li><a href="https://saltstack.com/community/" target="_blank" rel="noopener">Saltstack</a></li><li><a href="https://cfengine.com/" target="_blank" rel="noopener">Cfengine</a></li><li><a href="http://batsov.com/rubocop/" target="_blank" rel="noopener">Rubocop</a></li><li><a href="http://www.foodcritic.io/" target="_blank" rel="noopener">Foodcritic</a></li><li><a href="https://docs.chef.io/chefspec.html" target="_blank" rel="noopener">Chefspec</a></li><li><a href="http://kitchen.ci/" target="_blank" rel="noopener">kitchenCI</a></li><li><a href="https://docs.chef.io/ohai.html" target="_blank" rel="noopener">Ohai</a></li><li><a href="https://coreos.com/etcd/docs/latest/" target="_blank" rel="noopener">Etcd</a></li><li><a href="https://wiki.apache.org/hadoop/ZooKeeper" target="_blank" rel="noopener">Zookeeper</a></li><li><a href="https://www.consul.io/" target="_blank" rel="noopener">Consul</a></li><li><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a></li><li><a href="https://docs.docker.com/swarm/" target="_blank" rel="noopener">Docker swarm</a></li><li><a href="http://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a></li><li><a href="http://mesos.apache.org/" target="_blank" rel="noopener">Mesos</a></li><li><a href="http://rancher.com/" target="_blank" rel="noopener">Rancher</a></li><li><a href="https://cloud.google.com/container-engine/docs/" target="_blank" rel="noopener">Google cloud platform container engine</a></li><li><a href="https://aws.amazon.com/ecs/" target="_blank" rel="noopener">Amazon ECS</a></li><li><a href="https://www.habitat.sh/" target="_blank" rel="noopener">habitat</a></li></ul><h1><span id="chapter-5-continuous-delivery">Chapter 5: Continuous Delivery</span></h1><h3><span id="small-fast-better">Small + Fast = Better</span></h3><ul><li>Continuous Delivery has the following benefits:<ol><li>Time to market goes down</li><li>Quality increases not decreases</li><li>Limits your Work In Progress</li><li>Shortens lead times for changes</li><li>Improves Mean Time To Recover</li></ol></li></ul><h3><span id="continuous-integration-practices">Continuous Integration Practices</span></h3><ul><li>To successfully perform Continuous Integration:<ol><li>Builds should pass the coffee test (&lt; 5 minutes)</li><li>Commit really small bits</li><li>Don’t leave the build broken</li><li>Use a trunk based development flow</li><li>Don’t allow flaky tests, fix them!</li><li>The build should return a status, a log, and an artifact</li></ol></li></ul><h3><span id="the-continuous-delivery-pipeline">The Continuous Delivery Pipeline</span></h3><ul><li>To successfully perform Continuous Delivery:<ol><li>Only build artifacts once</li><li>Artifacts should be immutable</li><li>Deployment should go to a copy of production before going into production</li><li>Stop deploys if it a previous step fails</li><li>Deployments should be idempotent</li></ol></li></ul><h3><span id="the-role-of-qa">The Role Of QA</span></h3><ul><li>Types of Testing:<ul><li>Unit Testing</li><li>Code Hygiene</li><li>Integration Testing</li><li>TDD / BDD /ATDD</li><li>Infrastructure Testing</li><li>Performance Testing</li><li>Security Testing</li></ul></li></ul><h3><span id="your-ci-toolchain">Your CI Toolchain</span></h3><ul><li>Version Control</li><li>Continuous Integration</li><li>Build</li><li>Test</li><li>Artifact Repository</li><li>Deployment</li></ul><p>Go to PDF to find detail links</p><p>Tool Discovery Trick: Google one of these names “vs” and you’ll get autosuggestions of that tool versus other tools in its space other people are asking about!</p><h1><span id="chapter-6-reliability-engineering">Chapter 6: Reliability Engineering</span></h1><h3><span id="engineering-doesnt-end-with-deployment">Engineering Doesn’t End With Deployment</span></h3><h3><span id="design-for-operation-theory">Design For Operation - Theory</span></h3><h3><span id="design-for-operation-practice">Design For Operation - Practice</span></h3><h3><span id="operate-for-design-metrics-and-monitoring">Operate For Design: Metrics and Monitoring</span></h3><ul><li>The 6 Monitoring Areas<ol><li>Service Performance and Uptime</li><li>Software Component Metrics</li><li>System Metrics</li><li>App Metrics</li><li>Performance</li><li>Security</li></ol></li></ul><h3><span id="operate-for-design-logging">Operate for Design: Logging</span></h3><h3><span id="your-sre-toolchain">Your SRE Toolchain</span></h3><p>Go to PDF to find detail links</p><h1><span id="chapter-8-the-future-of-devops">Chapter 8: The Future of DevOps</span></h1><h3><span id="cloud-to-containers-to-serverless">Cloud to Containers to Serverless</span></h3><p>“<strong>cloud computing</strong> is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction” </p><p>“<strong>Serverless</strong>… is run in stateless compute containers that are event-triggered, ephemeral (may only last for one invocation), and fully managed by a 3rd party.”</p><h3><span id="reference">Reference</span></h3><ul><li><a href="https://www.linkedin.com/learning/devops-foundations/what-is-devops?u=3322" target="_blank" rel="noopener">DevOps Foundations</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/files/DevOps_Fundamentals.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;



&lt;!-- toc -
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Typing System Research</title>
    <link href="http://yoursite.com/2019/01/26/Typing%20System%20Research/"/>
    <id>http://yoursite.com/2019/01/26/Typing System Research/</id>
    <published>2019-01-25T16:00:00.000Z</published>
    <updated>2019-05-25T11:38:19.914Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="to-do">TO DO</span></h3><ul><li>Need to find some paper to read.</li></ul><h3><span id="impact-on-engineers-growth">Impact on engineer’s growth</span></h3><ul><li>With typing system, developer focus on design pattern and model which is the basic elements of architecture. In this case, developer will be a better developer or architect in the future.</li></ul><h3><span id="impact-on-engineering">Impact on engineering</span></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;to-do&quot;&gt;TO DO&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Need to find some paper to read.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span id=&quot;impact-on-engineers-growth&quot;&gt;Impact 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微内核架构应用研究</title>
    <link href="http://yoursite.com/2018/12/09/%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84%E5%BA%94%E7%94%A8%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/12/09/微内核架构应用研究/</id>
    <published>2018-12-08T16:00:00.000Z</published>
    <updated>2019-04-19T23:44:21.824Z</updated>
    
    <content type="html"><![CDATA[<p><strong>微内核架构（Microkernel Architecture）也叫 Plugin Architecture，是一种基于插件的架构方式，通过编写精简的微内核来支撑以 plugin 的方式来添加更多丰富的功能</strong>。微内核架构在我们常用的应用和框架里面非常常见，比如工具有 IntelliJ、Chrome、Sublime、Photoshop 等， 前端框架有 jQuery、Babel、Webpack 等，基本比较流行的应用和框架都采用了微内核架构，虽然具体技术实现不同，但从思想上，它们都利用了插件机制带来的扩展性和灵活性。</p><p>微内核架构具体来说是什么样子的架构？为何具有如此大的威力？有哪些框架在使用它和架构以及如何使用的？下面的内容会进行具体的介绍。</p><!-- toc --><ul><li><a href="#1-什么是微内核架构">1、什么是微内核架构？</a></li><li><a href="#2-微内核架构的前端应用">2、 微内核架构的前端应用</a><ul><li><a href="#21-jquery-的微内核架构实现">2.1、 jQuery 的微内核架构实现</a></li><li><a href="#22-webpack-的微内核架构实现">2.2、 Webpack 的微内核架构实现</a><ul><li><a href="#概念和架构设计">概念和架构设计</a></li><li><a href="#loader-设计">Loader 设计</a></li><li><a href="#tapable-plugin-framework">Tapable Plugin Framework</a></li><li><a href="#plugin-设计">Plugin 设计</a></li></ul></li><li><a href="#23-babel-的微内核架构实现">2.3、 Babel 的微内核架构实现</a><ul><li><a href="#解析阶段">解析阶段</a></li><li><a href="#转换阶段">转换阶段</a></li><li><a href="#生成阶段">生成阶段</a></li></ul></li></ul></li><li><a href="#3-微内核架构的服务端应用">3、微内核架构的服务端应用</a></li><li><a href="#4-总结">4、总结</a></li><li><a href="#参考资料">参考资料</a></li></ul><!-- tocstop --><h2><span id="1-什么是微内核架构">1、什么是微内核架构？</span></h2><p><strong>微内核架构包含两个核心概念：内核系统和插件模块。</strong>应用的逻辑被切分到内核系统和插件模块中，以提供很好的扩展性、灵活性和逻辑隔离性。<strong>内核系统是将系统所要完成的业务逻辑进行高度的抽象，在高度抽象概念的基础上以实现通用业务逻辑</strong>。<strong>插件模块是独立的组件，包含特定的处理逻辑和自定义代码，旨在增强或扩展微核心以产生额外的业务功能</strong>。通常，插件模块应独立于其他插件模块，当然也可以设计需要其他插件的插件。无论哪种方式，将插件之间的通信保持在最低限度以避免依赖性问题非常重要。</p><p>内核系统在运行时候需要知道可用的插件，并获取它们的引用。比较常见的方式是微内核实现一种类注册表的机制，插件会注册到注册表中，从而微内核在适当的时机完成对插件的调用。微内核和插件之间的具体通信协议在架构模式层面并没做具体限制，可以是在同一个进程内，也可以是分布式的，可以通过 Socket 通信，也可以通过 HTTP 通信。关键的是<strong>插件可以扩展微内核，并且各个插件之间的功能各自独立</strong>。</p><p><img src="/images/plugin-architecture.png" alt="plugin-architecture-pattern"></p><p>下面让我们看看现有的框架是如何实现微内核架构的。</p><h2><span id="2-微内核架构的前端应用">2、 微内核架构的前端应用</span></h2><h3><span id="21-jquery-的微内核架构实现">2.1、 jQuery 的微内核架构实现</span></h3><p>jQuery 是前端流行的综合性框架，为前端的发展做出了不朽的贡献，在 MV* 框架流行之前，jQuery 扛起了整个前端大旗。为什么 jQuery 能如此流行呢？其中一个重要的原因是 jQuery 的简单和非常容易扩展。jQuery 的插件规则非常简单，几乎没有具体的规则，这是它能在整个社区中实现的难以置信的多样性的原因之一。</p><p>我们可以简单地<strong>通过向 jQuery 的 jQuery.fn 对象添加一个新的函数属性来编写一个插件</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法 1</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>myPlugin<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//ourpluginlogic</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法 2</span>jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    myPlugin<span class="token punctuation">:</span> <span class="token function">funtion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//ourpluginlogic</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这里我们通过两种方法，生成了 myPlugin myPlugin 中可以做任何我们想做的事情。</p><p>具体插件使用方法如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#elem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      key<span class="token punctuation">:</span><span class="token string">"value"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这么简单的插件机制，jQuery 是如何实现的呢？jQuery 采用了原型设计模式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// jQuery 入口函数</span><span class="token keyword">var</span> jQuery <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// jQuery 核心原型定义，也是 jQuery plugin 的扩展接口</span>jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    hello<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//... 其他定义</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 另一种扩展 plugin 的便捷方法，接收一个对象</span>jQuery<span class="token punctuation">.</span>extend <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 克隆 targetObj</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// jQuery 真正的实例化构造函数</span><span class="token keyword">var</span> init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// init dom elements</span><span class="token punctuation">}</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>jQuery<span class="token punctuation">.</span>init <span class="token operator">=</span> init<span class="token punctuation">;</span>$ <span class="token operator">=</span> jQuery<span class="token punctuation">;</span></code></pre><p>我们所有的扩展其实赋值给了 jQuery.prototype，这样在生成真正的 jQuery 对象的时候，相应的扩展就都可以使用了。jQuery 中自带的大量函数都是基于这种方式实现的。</p><h3><span id="22-webpack-的微内核架构实现">2.2、 Webpack 的微内核架构实现</span></h3><p>Webpack 是前端领域熟知的打包框架，可以将各种资源打包到 js 文件中，统一进行管理。Webpack 之所以能灵活的加载各种类型的资源，并将这些资源以灵活的形式进行打包，得益于 Webpack 优雅的微内核架构设计。</p><h4><span id="概念和架构设计">概念和架构设计</span></h4><p><strong>Webpack 的整体概念设计包括 Compiler、Loader 和 Plugin</strong>，</p><ul><li>Compiler - 从业务上来讲， Webpack 本质上就是一个编译器，Compiler 实现了核心的微内核架构，将 Loader 和Plugin 合理的组织在一起</li><li>Loader - 顾名思义是不同类型的资源加载器，比如 css-loader，babel-loader</li><li>Plugin - Compiler 在整个编译过程中，以 Hook 的形式暴露出了一系列回调，以供开发者编写 Plugin 来接收 Hook 并处理</li></ul><p>三者的关系如下图<br><img src="/images/webpack.png" alt="Webpack Concept Arch"></p><h4><span id="loader-设计">Loader 设计</span></h4><p>Loader 和 Compiler 之间的关系非常灵活。Compiler 根据文件后缀筛选出相应的 Loader 来加载文件，比如用 css-loader 来加载 css 文件，用 babel-loader 来加载 jsx 文件。</p><p>Loader 接收 Compiler 传递过来的字符串形式的文件，经过编译和转换成为 javascript 之后将结果返还给 webpack 的 Compiler。Compiler 会从返回的结果中解析需要继续加载的 module，继续逐级加载，直至加载完成整个 module 依赖图。这个记载过程中可能会遇到各种各样的资源类型，会分别找到相应的 Loader 来加载。</p><p>附上 <a href="https://webpack.js.org/api/loaders/" target="_blank" rel="noopener">Loader API</a></p><h4><span id="tapable-plugin-framework">Tapable Plugin Framework</span></h4><p>在讲 Webpack 的 Plugin 实现之前，需要提一下 webpack 中衍生出来的 <a href="https://github.com/webpack/tapable" target="_blank" rel="noopener">Tapable Plugin Framework</a>。<strong>Tapable 是 webpack 插件架构的核心，极大简化了 webpack 的整体架构</strong>。虽然它在为 webpack 服务，但庆幸的是 Tapable 的优雅抽象使得我们能用它来编写其他微内核架构。</p><p>这里简单介绍一下 Tapable 的核心概念，更多细节可以参考 <a href="https://github.com/webpack/tapable" target="_blank" rel="noopener">Tapable Github</a></p><p><strong>Tapable 中核心概念包括 Hook 和 Tap。Hook 是 Compiler 编译过程中主动释放出的接口，Tap 可以为理解 HookHandler</strong>。这看起来很像是 Event 和 EventHandler 的关系，但细细思考和看代码之后，其实差距还挺大的。</p><p>在整个执行过程中，Tap 执行后会返回结果，并且这个返回结果会在后续的编译处理中使用，不论 Tap 是同步执行还是异步执行。而 Event 和 EventHandler 的关系，EventHandler 更像是 Event 发生后的一种副作用，不论是语义和编程模型都和 Hook 与 Tap 不同。</p><p>Tapable 提供了多种类型的 Hook，以方便进行数据处理和收集。按照执行类型可以分为：<code>Sync、AsyncSeries、AsyncParallel</code>。按照返回结果可以分为: <code>Basic、Waterfall、Bail、Loop</code>。这使得 Compiler 的编程模型得到了极大简化。更多细节这里就不赘述了，如果想要了解更多请移步 <a href="https://github.com/webpack/tapable" target="_blank" rel="noopener">Tapable Github</a> 和 <a href="https://www.npmjs.com/package/@types/tapable" target="_blank" rel="noopener">Tapable Type Definition</a></p><h4><span id="plugin-设计">Plugin 设计</span></h4><p>在讲完了 Loader 和 Tapable 之后，Plugin 的逻辑也就更好理解了，Compiler 使用 Loader 加载完成 javascript 之后，会在 Compiler 中调用各种 Hook 来完成核心的打包编译逻辑，而这些核心的打包和处理逻辑全都是 Plugin 实现了 Hook 回调来完成的。下面举一个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>    SyncHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"tapable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>            accelerate<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"newSpeed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            brake<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setSpeed</span><span class="token punctuation">(</span>newSpeed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现真正的加速</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>accelerate<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>newSpeed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Use the tap method to add a plugin</span>myCar<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>accelerate<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">"LoggerPlugin"</span><span class="token punctuation">,</span> newSpeed <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Accelerating to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newSpeed<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myCar<span class="token punctuation">.</span><span class="token function">setSpeed</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印出 Accelerating to 13</span></code></pre><p>这里 Car 这个实体使用 SyncHook 暴露了 accelerate Hook，当汽车真正开始加速之后，调用加速 Hook，相应的 Tap 也会被执行。 </p><h3><span id="23-babel-的微内核架构实现">2.3、 Babel 的微内核架构实现</span></h3><p>Babel 是现代前端领域必备的 JavaScript 编译器，特别是用 ES6 来编写前端，它是一个源码到源码的编译器，通常也叫做 “转换编译器（transpiler)”。面对快速变化而异构的前端环境，Babel 也使用了 Plugin 微内核架构来扩展自身的编译生命周期。</p><p>Babel 的生命周期主要抽象为 3 个核心阶段：</p><ul><li>解析（parse）- 进行词法分析（Lexical Analysis）和语法分析（Syntactic Analysis）以生成 <a href="https://astexplorer.net/" target="_blank" rel="noopener">AST(抽象语法树)</a> </li><li>转换 (transform) - 对 AST 进行相应的转换操作，此处实现了丰富的 Plugin 机制</li><li>生成 (generate) - 根据 AST 生成目标代码</li></ul><blockquote><p>AST 是编译器的核心数据结构，所有的源代码在经历解析阶段之后转换为 AST，转换阶段的核心代码都在操作 AST。更多 AST 细节移步 <a href="https://astexplorer.net/" target="_blank" rel="noopener">AST Explorer</a> 和 <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="noopener">AST Wiki</a></p></blockquote><p> 目前看来，Babel 由于解析阶段的复杂性，解析阶段暂时没有微内核架构支撑，但转换阶段实现了清晰微内核架构，可以方便的编写 plugin 来支撑语法转换，生成阶段比较简单，直接根据转换阶段生成的 AST 输出即可，不需要微内核架构。</p><h4><span id="解析阶段">解析阶段</span></h4><p>解析阶段将源代码解析为 <a href="https://astexplorer.net/" target="_blank" rel="noopener">AST(抽象语法树)</a>, Babel 暂时并没有对普通开发者暴露 plugin 开发接口，而是使用继承的方式来进行扩展，实现不同语言的解析器。所以如果想要支持新的语法，此阶段需要直接往 Babel 中提交相应的 PR，但相应的转换阶段代码可以用 plugin 的方式进行开发。</p><p>这里列举了 Babel 中常用的 Parser 类型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 通用解析器</span><span class="token keyword">class</span> <span class="token class-name">Parser</span> <span class="token keyword">extends</span> <span class="token class-name">StatementParser</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Typescript 解析器</span><span class="token keyword">class</span> <span class="token class-name">TypescriptParser</span> <span class="token keyword">extends</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Flow 解析器</span><span class="token keyword">class</span> <span class="token class-name">FlowParser</span> <span class="token keyword">extends</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Jsx 解析器</span><span class="token keyword">class</span> <span class="token class-name">JsxParser</span> <span class="token keyword">extends</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Es 解析器</span><span class="token keyword">class</span> <span class="token class-name">EsTreeParser</span> <span class="token keyword">extends</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4><span id="转换阶段">转换阶段</span></h4><p>在解析阶段结束后，会生成 AST，转换阶段主要就是对 ASTNode 进行操作。所有的转换代码都可以用 plugin 的方式实现相应的 Visitor 来提供。Visitor 是操作 ASTNode 的实体定义。解析阶段所有的 Visitor 会尝试遍历所有感兴趣的 ASTNode。举个简单的例子：</p><p>这里是一个非常简单的 Babel 插件，用于处理 === 的表达式。<br>假设要将语句 <code>foo === bar</code>，解析为 <code>yun === song</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// example plugin</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>babel<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">BinaryExpression</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>operator <span class="token operator">!==</span> <span class="token string">"==="</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>left <span class="token operator">=</span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">"yun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>right <span class="token operator">=</span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">"song"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此函数在运行后，会返回 plugin 对象。plugin 对象中的变量 Visitor 包含核心 transform 逻辑，通过提供要处理的表达式类型，比如这里是 <code>BinaryExpression</code>，即可以处理相应的语句。这里判断如果 BinaryExpression 是一个 === 操作，就将变量的左右进行替换。</p><p>Visitor 主要是在操作 AST，比如上述 <code>foo === bar</code> 对应的语法分析树为：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">"BinaryExpression"</span><span class="token punctuation">,</span>    operator<span class="token punctuation">:</span> <span class="token string">"==="</span><span class="token punctuation">,</span>    left<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"foo"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    right<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"bar"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述 Visitor 就是在将 left 和 right 换掉。 </p><p>这里附上 Visitor 的接口定义，</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// Scope 是作用域，Binding 是变量和作用域的关系</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Binding</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// plugin 编写核心接口</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Visitor</span><span class="token operator">&lt;</span>S <span class="token operator">=</span> Node<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">VisitNodeObject</span><span class="token operator">&lt;</span>Node<span class="token operator">></span> <span class="token punctuation">{</span>    ArrayExpression<span class="token operator">?</span><span class="token punctuation">:</span> VisitNode<span class="token operator">&lt;</span>S<span class="token punctuation">,</span> t<span class="token punctuation">.</span>ArrayExpression<span class="token operator">></span><span class="token punctuation">;</span>    AssignmentExpression<span class="token operator">?</span><span class="token punctuation">:</span> VisitNode<span class="token operator">&lt;</span>S<span class="token punctuation">,</span> t<span class="token punctuation">.</span>AssignmentExpression<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">export</span> type VisitNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> P<span class="token operator">></span> <span class="token operator">=</span> VisitNodeFunction<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> P<span class="token operator">></span> <span class="token operator">|</span> VisitNodeObject<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">export</span> type VisitNodeFunction<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> P<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> T<span class="token punctuation">,</span> path<span class="token punctuation">:</span> NodePath<span class="token operator">&lt;</span>P<span class="token operator">></span><span class="token punctuation">,</span> state<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VisitNodeObject</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    enter<span class="token operator">?</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> NodePath<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> state<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>    exit<span class="token operator">?</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> NodePath<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> state<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 代表一个 Node，但比 Node 拥有更丰富的信息，方便快速处理</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">NodePath</span><span class="token operator">&lt;</span>T <span class="token operator">=</span> Node<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4><span id="生成阶段">生成阶段</span></h4><p>暂无微内核架构</p><h2><span id="3-微内核架构的服务端应用">3、微内核架构的服务端应用</span></h2><p> <strong>TODO</strong></p><h2><span id="4-总结">4、总结</span></h2><p>从以上的分析，我们可以看到。微内核架构作为一种常用的架构模式，无论是在前端和后端，都能极大的简化架构设计，并提供优越的扩展性和灵活性。对我们个人的设计和开发提供了很好的思路。</p><h2><span id="参考资料">参考资料</span></h2><ul><li><a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="noopener">Learning Javascript Design Patterns</a></li><li><a href="https://github.com/jquery/jquery" target="_blank" rel="noopener">jQuery 源代码</a></li><li><a href="https://webpack.js.org/api/" target="_blank" rel="noopener">Webpack API</a></li><li><a href="https://github.com/webpack/tapable" target="_blank" rel="noopener">Tapable Plugin Framework</a></li><li><a href="https://www.npmjs.com/package/@types/tapable" target="_blank" rel="noopener">Tapable Type Definition</a></li><li><a href="https://astexplorer.net/" target="_blank" rel="noopener">AST Explorer</a></li><li><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-introduction" target="_blank" rel="noopener">Babel 插件手册</a></li><li><a href="https://github.com/babel/babel/tree/master/packages/babel-parser" target="_blank" rel="noopener">@babel/parser</a></li><li><a href="https://www.npmjs.com/package/@types/babel-traverse" target="_blank" rel="noopener">@types/babel-traverse</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;微内核架构（Microkernel Architecture）也叫 Plugin Architecture，是一种基于插件的架构方式，通过编写精简的微内核来支撑以 plugin 的方式来添加更多丰富的功能&lt;/strong&gt;。微内核架构在我们常用的应用和框架里
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="http://yoursite.com/2018/12/06/About%20Me/"/>
    <id>http://yoursite.com/2018/12/06/About Me/</id>
    <published>2018-12-06T07:29:10.321Z</published>
    <updated>2019-05-19T07:44:03.513Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my site, hope that you will enjoy my article.</p><p>Here is who I am:</p><ul><li>A developer working in Microsoft</li><li>A learner try to seeking rules of everything</li><li>A father for a baby to be borned</li></ul><p>Here is my profile:</p><ul><li>GitHub:       <a href="https://github.com/yunsong0922" target="_blank" rel="noopener">https://github.com/yunsong0922</a></li><li>Email:        <a href="mailto:lhq9220@gmail.com" target="_blank" rel="noopener">lhq9220@gmail.com</a></li><li>LinkedIn:     <a href="https://www.linkedin.com/in/liuhuaqing/" target="_blank" rel="noopener">https://www.linkedin.com/in/liuhuaqing/</a></li><li>PenName:      YunSong</li><li>WeChat:       15117946626</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to my site, hope that you will enjoy my article.&lt;/p&gt;
&lt;p&gt;Here is who I am:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A developer working in Microsoft&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="你好" scheme="http://yoursite.com/tags/%E4%BD%A0%E5%A5%BD/"/>
    
  </entry>
  
</feed>
